Include: AssertThrew.vader

Execute (typevim: Rethrow Rejects Non-String Arguments):
  AssertThrows call typevim#Rethrow(1)
  AssertThrew 'ERROR(WrongType)'

Execute (typevim: Rethrow Prepends a Space if Exception Starts with 'Vim'):
  AssertThrows call typevim#Rethrow('Vim')
  AssertThrew '^ Vim$'

Execute (typevim: Rethrow Throws "As Is" Otherwise):
  AssertThrows call typevim#Rethrow("\tVim")
  AssertThrew "^\tVim$"

Do (typevim#input: Permits Input from Vader):
  :let @" = typevim#input(0, 'prompt: ')\<cr>
  oh im a lumberjack and im okay\<cr>
  p
Expect:
  oh im a lumberjack and im okay

Execute (typevim: Test Type Constants):
  AssertEqual 6, typevim#Bool(),   'Failed on: Bool'
  AssertEqual 4, typevim#Dict(),   'Failed on: Dict'
  AssertEqual 5, typevim#Float(),  'Failed on: Float'
  AssertEqual 2, typevim#Func(),   'Failed on: Func'
  AssertEqual 3, typevim#List(),   'Failed on: List'
  AssertEqual 0, typevim#Number(), 'Failed on: Number'
  AssertEqual 1, typevim#String(), 'Failed on: String'

Execute (typevim: Test Type Constants w/ Built-Ins):
  if typevim#value#HasTypeConstants()
    AssertEqual v:t_bool,   typevim#Bool(),   'Failed on: Bool'
    AssertEqual v:t_dict,   typevim#Dict(),   'Failed on: Dict'
    AssertEqual v:t_float,  typevim#Float(),  'Failed on: Float'
    AssertEqual v:t_func,   typevim#Func(),   'Failed on: Func'
    AssertEqual v:t_list,   typevim#List(),   'Failed on: List'
    AssertEqual v:t_number, typevim#Number(), 'Failed on: Number'
    AssertEqual v:t_string, typevim#String(), 'Failed on: String'
  endif

Execute (typevim: Test Type Constants to TypeNames):
  function! Foo()
    echo 'yee'
  endfunction

  for g:Ref in [{}, 0.0, function('Foo'), [], 0, '']
    AssertEqual maktaba#value#TypeName(g:Ref),
              \ typevim#value#ConstantToTypeName(type(g:Ref))
  endfor

  if typevim#value#HasTypeConstants()
    AssertEqual maktaba#value#TypeName(v:true),
              \ typevim#value#ConstantToTypeName(typevim#Bool())
  endif

Execute (typevim: VarOrDefault type checks vs. default when no type is given):
  let g:setting = 3    " int
  AssertEqual g:setting, typevim#VarOrDefault('g:setting', 6)
  AssertThrows call typevim#VarOrDefault('g:setting', 3.1)
  AssertThrew 'ERROR(WrongType)'
  AssertThrows call typevim#VarOrDefault('g:setting', 3.1, -1)
  AssertThrew 'ERROR(WrongType)'

Execute (typevim: VarOrDefault compares against explicit type when given):
  let g:setting = 3
  " shouldn't throw
  AssertEqual g:setting, typevim#VarOrDefault('g:setting', 'foobar', typevim#Number())

Execute (typevim: VarOrDefault returns default when the named var isn't set):
  unlet! g:setting
  AssertEqual 3, typevim#VarOrDefault('g:setting', 3)

  " a default dictionary/list/etc. should be returned by reference
  let g:default = {}
  Assert typevim#VarOrDefault('g:setting', g:default) is g:default
  let g:default = []
  Assert typevim#VarOrDefault('g:setting', g:default) is g:default

  function! Foo()
    return 0
  endfunction
  let g:Default = function('Foo')
  Assert typevim#VarOrDefault('g:setting', g:Default) is g:Default
