" Note that the actual use of AbstractFunc is primarily tested in
" `test-make-Derived.vader`, through invocation of abstract functions on a
" class instance.

Include: AssertThrew.vader

Execute (typevim#make#AbstractFunc: Type-Checking, Error-Checking Funcname):
  let g:params = []
  AssertThrows call typevim#make#AbstractFunc('Typename', 0, g:params)
  AssertThrew 'ERROR(WrongType)'

  let g:Func = typevim#make#AbstractFunc('Typename', '__Foo', g:params)
  AssertThrows call g:Func()
  AssertThrew 'ERROR(NotImplemented)'

Execute (typevim#make#AbstractFunc: Empty String Argname):
  let g:params = ['']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertThrew 'ERROR(BadValue): Gave an empty'

  let g:params = ['abc', '[]']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertThrew 'ERROR(BadValue): Gave an empty'

  let g:params = ['abc', 'cde', ""]
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertThrew 'ERROR(BadValue): Gave an empty'

Execute (typevim#make#AbstractFunc: Argname is Bad Identifier):
  let g:params = ['abc', 'cde@']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertThrew 'ERROR(BadValue):.*illegal character'

  let g:params = ['-abc', 'cde']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertThrew 'ERROR(BadValue):.*start with letter'

Execute (typevim#make#AbstractFunc: Named after Argslist):
  let g:params = ['abc', 'cde', '[bcd]', '...', 'def']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertEqual 'ERROR(BadValue): Specified a parameter "def" after the optional '
      \ . "argslist in parameter list: [ 'abc', 'cde', '[bcd]', '...', 'def' ]",
      \ g:vader_exception

Execute (typevim#make#AbstractFunc: Non-Optional after Optional):
  let g:params = ['[abc]', 'cde']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertEqual 'ERROR(BadValue): Specified a parameter "cde" after the optional '
      \ . "parameter \"abc\" in parameter list: [ '[abc]', 'cde' ]",
      \ g:vader_exception

  let g:params = ['abc', '[bcd]', 'cde']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertEqual 'ERROR(BadValue): Specified a parameter "cde" after the optional '
      \ . "parameter \"bcd\" in parameter list: [ 'abc', '[bcd]', 'cde' ]",
      \ g:vader_exception

Execute (typevim#make#AbstractFunc: Duplicate Names):
  let g:params = ['abc', 'bcd', 'abc']
  AssertThrows call typevim#make#AbstractFunc('Typename', 'funcname', g:params)
  AssertEqual 'ERROR(BadValue): Specified a parameter name "abc" twice in '
      \ . "parameter list: [ 'abc', 'bcd', 'abc' ]",
      \ g:vader_exception
