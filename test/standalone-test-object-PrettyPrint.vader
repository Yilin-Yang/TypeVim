Include: AssertThrew.vader
Include: PrintIntoBuffer.vader

Execute (typevim#object#PrettyPrint: Declare Helpers):
  ""
  " The default clean-upper changes depending on the running version of vim.
  " For consistency of test cases that use Expect blocks, check that the
  " default clean-upper is present, and delete it from the buffer.
  function! CheckAndWipeCleanUpper()
    %s/"CleanUp": function(.\{-})/"CleanUp": {###CLEAN_UPPER###}/ge
  endfunction

Execute (typevim#object#GetIndentBlock: Ordinary):
  AssertEqual '', typevim#object#GetIndentBlock(0)
  AssertEqual '  ', typevim#object#GetIndentBlock(1)
  AssertEqual '    ', typevim#object#GetIndentBlock(2)
  AssertEqual '    ', typevim#object#GetIndentBlock(2)
  AssertEqual '', typevim#object#GetIndentBlock(0)

Execute (typevim#object#GetIndentBlock: Boundary):
  AssertEqual '                  ',
      \ typevim#object#GetIndentBlock(9), 'Failed on 9'
  AssertEqual '                    ',
      \ typevim#object#GetIndentBlock(10), 'Failed on 10'
  AssertEqual '                        ',
      \ typevim#object#GetIndentBlock(12), 'Failed on 12'
  AssertEqual '  ', typevim#object#GetIndentBlock(1), 'Failed on 1'

Execute (typevim#object#GetIndentBlock: Error Checking):
  AssertThrows call typevim#object#GetIndentBlock(-5)
  AssertEqual 0, match(g:vader_exception, '^ERROR(BadValue)'),
      \ 'Threw wrong exception: '.g:vader_exception

  AssertThrows call typevim#object#GetIndentBlock('foobar')
  AssertEqual 0, match(g:vader_exception, '^ERROR(WrongType)'),
      \ 'Threw wrong exception: '.g:vader_exception

Execute (typevim#object#PrettyPrint: prints numbers):
  AssertEqual '0', typevim#object#PrettyPrint(0)
  AssertEqual '-78910', typevim#object#PrettyPrint(-78910)
  AssertEqual '25', typevim#object#PrettyPrint(25)

Execute (typevim#object#PrettyPrint: prints floats):
  AssertEqual '0.0', typevim#object#PrettyPrint(0.0)
  AssertEqual '0.25', typevim#object#PrettyPrint(1/4.0)
  AssertEqual '1.5e24', typevim#object#PrettyPrint(1500000000000000000000000.0)
  AssertEqual '0.0', typevim#object#PrettyPrint(1-1.0)
  AssertEqual '-0.5', typevim#object#PrettyPrint(0.5-1.0)

Execute (typevim#object#PrettyPrint: prints strings):
  AssertEqual "'foobar foo'", typevim#object#PrettyPrint('foobar foo')
  AssertEqual "'\n'", typevim#object#PrettyPrint("\n")
  AssertEqual "'     '", typevim#object#PrettyPrint('     ')
  let g:val = '     '
  AssertEqual "'     '", typevim#object#PrettyPrint(g:val)

Execute (typevim#object#PrettyPrint: prints funcrefs):
  function! Foo(...) dict abort
    echo l:self
  endfunction
  function! Bar(...) dict abort
    echo l:self
  endfunction
  AssertEqual "function('Foo')", typevim#object#PrettyPrint(function('Foo'))

Execute (typevim#object#PrettyPrint: max_depth < -1 is an error):
  AssertThrows call typevim#object#PrettyPrint('foobar', -2)
  AssertThrew 'ERROR(BadValue)'

Execute (typevim#object#PrettyPrint: non-numeric max_depth is an error):
  AssertThrows call typevim#object#PrettyPrint('foobar', 2.0)
  AssertThrew 'ERROR(WrongType)'

Execute (typevim#object#PrettyPrint: prints primitive objects, even when max_depth = 0):
  AssertEqual "0.0", typevim#object#PrettyPrint(0.0, 0)
  AssertEqual "1", typevim#object#PrettyPrint(1, 0)
  AssertEqual "'foobar foo'", typevim#object#PrettyPrint('foobar foo', 0)
  AssertEqual "function('Foo')", typevim#object#PrettyPrint(function('Foo'), 0)

Execute (typevim#object#PrettyPrint: prints terse collections when max_depth = 0):
  AssertEqual '{dict}', typevim#object#PrettyPrint({}, 0)
  AssertEqual '{object}', typevim#object#PrettyPrint(TestBase#New(3.14), 0)
  AssertEqual '[list]', typevim#object#PrettyPrint([], 0)

Execute (typevim#object#PrettyPrint: prints terse lists on hitting max_depth):
  let g:val = [0]
  for _ in range(50)
    let g:val = [ g:val ]
  endfor
  AssertEqual '[ [ [list] ] ]', typevim#object#PrettyPrint(g:val, 3)

Execute (typevim#object#PrettyPrint: embeds error message text when exceptions are thrown):
  let g:output = typevim#object#PrettyPrint(g:val)
  " arbitrary cutoff, but should recurse at least 10 levels deep before E132
  AssertNotEqual -1, match(g:output, '\[ \[ \[ \[ \[ \[ \[ \[ \[ \[.*] ] ] ] ] ] ] ] ] ]'),
      \ printf('Did not recurse deeply enough before error: %s', g:output)
  AssertNotEqual -1, match(g:output, 'ERROR: .*E132'),
      \ printf('Did not embed exception text: %s', g:output)

Execute (typevim#object#PrettyPrint: prints arg-bound partials):
  let g:val = [1, 2]
  call add(g:val, g:val)  " bound args are self-referencing
  " NOTE: binding an argument list to a Funcref effectively *copies* the list;
  " if it didn't, then modifications to the original list would change the
  " bound arguments inside the Partial!
  AssertEqual "function('Foo', [ 1, 2, [ 1, 2, {self-reference} ] ])",
      \ typevim#object#PrettyPrint(function('Foo', g:val))

Execute (typevim#object#PrettyPrint: prints dict-bound partials):
  let g:dict = {'num': 1, 'fun': 2}
  let g:dict['Boo'] = function('Foo')
  AssertEqual "function('Foo', {\n  \"Boo\": function('Foo'),\n  \"fun\": 2,\n  \"num\": 1\n})",
      \ typevim#object#PrettyPrint(function('Foo', g:dict))

Execute (typevim#object#PrettyPrint: prints one item lists):
  AssertEqual "[ 1 ]", typevim#object#PrettyPrint([1])

Execute (typevim#object#PrettyPrint: prints primitive lists):
  let g:val = '   '
  AssertEqual "[ 1, 3, '   ', -0.5, 'foobar' ]",
      \ typevim#object#PrettyPrint([1,3, g:val, 0.5-1, 'foobar'])

Execute (typevim#object#PrettyPrint: prints lists containing funcrefs):
  AssertEqual "[ function('Foo'), function('Bar') ]",
      \ typevim#object#PrettyPrint([function('Foo'), function('Bar')])

Execute (typevim#object#PrettyPrint: prints lists containing lists, dicts):
  let g:val = [ [1, 2, 3, [] ], 1, {'foo': 'bar', 'bar': [1, 2, 3] } ]
  AssertEqual "[ [ 1, 2, 3, [  ] ], 1, {\n  \"bar\": [ 1, 2, 3 ],\n  \"foo\": \"bar\"\n} ]",
      \ typevim#object#PrettyPrint(g:val)

Execute (typevim#object#PrettyPrint: prints self-referencing lists):
  let g:val = [ 0, 1, 2 ]
  call add(g:val, g:val)
  AssertEqual '[ 0, 1, 2, {self-reference} ]',
      \ typevim#object#PrettyPrint(g:val)

Execute (typevim#object#PrettyPrint: prints multilevel self-referencing lists):
  let g:val = [ 0, 1, 2 ]
  let g:grandchild = [ 1, 2, 3, g:val ]
  let g:child = [ g:grandchild, 2, 4 ]
  call add(g:val, g:child)
  call add(g:val, g:grandchild)
  AssertEqual "[ 0, 1, 2, [ "
      \ .   "[ 1, 2, 3, {self-reference} ], 2, 4 ], "
      \ . "{self-reference, idx: 1} ], "
      \ . "self-referencing objects: "
      \ .   "[ [ 0, 1, 2, [list], [list] ], [ 1, 2, 3, [list] ] ]",
      \ typevim#object#PrettyPrint(g:val)

Given (Empty Buffer):

Execute (typevim#object#PrettyPrint: prints primitive dicts):
  let g:val = { "a": "bcd" }
  AssertEqual "{\n  \"a\": \"bcd\"\n}", typevim#object#PrettyPrint(g:val)

Execute (typevim#object#PrettyPrint: prints empty dicts):
  call PrintIntoBuffer(typevim#object#PrettyPrint({}))
Expect:
  
  {  }

Execute (typevim#object#PrettyPrint: prints dicts, w/ multiple levels of indentation):
  let g:val = { "a": { "foo": "bar", "goo": "bar" }, "b": "bcd" }
  call PrintIntoBuffer(typevim#object#PrettyPrint(g:val))
Expect:
  
  {
    "a": {
      "foo": "bar",
      "goo": "bar"
    },
    "b": "bcd"
  }

Execute (typevim#object#PrettyPrint: prints a dict containing lists, dicts):
  let g:val = {
      \ 'abc': 'thoom',
      \ 'bcd': [1, 2, 3],
      \ 'cde': {'abc': 'thoom', 'bcd': [1, 2, 3]},
      \ 'def': 243,
      \ }
  call PrintIntoBuffer(typevim#object#PrettyPrint(g:val))
Expect:

  {
    "abc": "thoom",
    "bcd": [ 1, 2, 3 ],
    "cde": {
      "abc": "thoom",
      "bcd": [ 1, 2, 3 ]
    },
    "def": 243
  }

Execute (typevim#object#PrettyPrint: prints self-referencing dicts):
  let g:val = {
      \ 'abc': 'thoom',
      \ 'bcd': [1, 2, 3],
      \ 'cde': {'abc': 'thoom', 'bcd': [1, 2, 3]},
      \ 'def': 243,
      \ }
  let g:val['cde']['cde'] = g:val
  call add(g:val['bcd'], g:val)
  call add(g:val['bcd'], {'foo':'bar'})
  call PrintIntoBuffer(typevim#object#PrettyPrint(g:val))
Expect:

  {
    "abc": "thoom",
    "bcd": [ 1, 2, 3, {self-reference}, {
      "foo": "bar"
    } ],
    "cde": {
      "abc": "thoom",
      "bcd": [ 1, 2, 3 ],
      "cde": {self-reference}
    },
    "def": 243
  }

Execute (typevim#object#PrettyPrint: prints terse multilevel dicts on hitting max_depth):
  let g:val = {'foo': {}, 'bar': {}}
  for _ in range(5)  " NOTE: don't set this too high, will create O(2^n) dicts
    let g:val = { 'foo': deepcopy(g:val), 'bar': deepcopy(g:val) }
  endfor
  call PrintIntoBuffer(typevim#object#PrettyPrint(g:val, 3))

Expect:

  {
    "bar": {
      "bar": {dict},
      "foo": {dict}
    },
    "foo": {
      "bar": {dict},
      "foo": {dict}
    }
  }

Execute (typevim#object#PrettyPrint: prints multilevel self-referencing dicts):
  let g:val = {
      \ 'abc': 'thoom',
      \ 'bcd': {},
      \ 'cde': 243,
      \ 'def': [],
      \ }
  let g:val['bcd']['abc'] = g:val
  call add(g:val['def'], g:val['bcd'])
  call PrintIntoBuffer(typevim#object#PrettyPrint(g:val))
Expect:

  {
    "abc": "thoom",
    "bcd": {
      "abc": {self-reference}
    },
    "cde": 243,
    "def": [ {self-reference, idx: 1} ]
  }, self-referencing objects: [ { "abc": "thoom", "bcd": {dict}, "cde": 243, "def": [list] }, { "abc": {dict} } ]

Execute (typevim#object#PrettyPrint: prints primitive objects):
  let g:val = TestBase#New(3.14)
  call PrintIntoBuffer(typevim#object#PrettyPrint(g:val))
Then (Check for Destructor):
  call CheckAndWipeCleanUpper()
Expect:

  OBJECT: {
    "CleanUp": {###CLEAN_UPPER###},
    "GetVal": function('TestBase#GetVal'),
    "SetVal": function('TestBase#SetVal'),
    "StringifyVals": function('TestBase#StringifyVals'),
    "___CLEAN_UPPERS___": [ 0 ],
    "___TYPES_DICT___": {
      "TestBase": 1
    },
    "___TYPE___": [ 'TestBase' ],
    "__val": 3.14
  }

Execute (typevim#object#ShallowPrint: prints derived objects without throwing exceptions):
  let g:val = TestDerived#New(0, 0, 0)
  call PrintIntoBuffer(typevim#object#ShallowPrint(g:val, 2))

Execute (typevim#object#ShallowPrint: prints empty lists):
  let g:val = []
  call PrintIntoBuffer(typevim#object#ShallowPrint(g:val, 2))
Expect:

  [  ]

Execute (typevim#object#ShallowPrint: prints empty dicts):
  let g:val = {}
  call PrintIntoBuffer(typevim#object#ShallowPrint(g:val, 2))
Expect:

  {  }

Execute (typevim#object#PrettyPrint: prints a primitive object w/ self-referencing funcrefs):
  let g:val = TestSelfRef#New(3.14)
  call PrintIntoBuffer(typevim#object#PrettyPrint(g:val))
Then (Check for Destructor):
  call CheckAndWipeCleanUpper()
Expect:

  OBJECT: {
    "CleanUp": {###CLEAN_UPPER###},
    "GetVal": function('TestSelfRef#GetVal', {self-reference}),
    "___CLEAN_UPPERS___": [ 0 ],
    "___TYPES_DICT___": {
      "TestSelfRef": 1
    },
    "___TYPE___": [ 'TestSelfRef' ],
    "__val": 3.14
  }

Execute (typevim#Print: prints a primitive object w/ self-referencing funcrefs):
  let g:val = TestSelfRef#New(3.14)
  call PrintIntoBuffer(typevim#Print(g:val))
Then (Check for Destructor):
  call CheckAndWipeCleanUpper()
Expect:

  OBJECT: {
    "CleanUp": {###CLEAN_UPPER###},
    "GetVal": function('TestSelfRef#GetVal', {self-reference}),
    "___CLEAN_UPPERS___": [ 0 ],
    "___TYPES_DICT___": {
      "TestSelfRef": 1
    },
    "___TYPE___": [ 'TestSelfRef' ],
    "__val": 3.14
  }

Execute (typevim#PrintShallow: prints a list of numbers):
  let g:val = [0, 1, 2, 3]
  call PrintIntoBuffer(typevim#PrintShallow(g:val, 2))
Expect:

  [ 0, 1, 2, 3 ]

Execute (typevim#object#PrettyPrint: prints compound objects):
  let g:val = TestSelfRef#New(3.14)
  let g:child = TestSelfRef#New(6.28)
  let g:val.child = g:child
  call PrintIntoBuffer(typevim#Print(g:val))
Then (Check for Destructor):
  call CheckAndWipeCleanUpper()
Expect:

  OBJECT: {
    "CleanUp": {###CLEAN_UPPER###},
    "GetVal": function('TestSelfRef#GetVal', {self-reference}),
    "___CLEAN_UPPERS___": [ 0 ],
    "___TYPES_DICT___": {
      "TestSelfRef": 1
    },
    "___TYPE___": [ 'TestSelfRef' ],
    "__val": 3.14,
    "child": OBJECT: {
      "CleanUp": {###CLEAN_UPPER###},
      "GetVal": function('TestSelfRef#GetVal', {self-reference, idx: 1}),
      "___CLEAN_UPPERS___": [ 0 ],
      "___TYPES_DICT___": {
        "TestSelfRef": 1
      },
      "___TYPE___": [ 'TestSelfRef' ],
      "__val": 6.28
    }
  }, self-referencing objects: [ OBJECT: { "CleanUp": {###CLEAN_UPPER###}, "GetVal": function('TestSelfRef#GetVal, {partial}'), "___CLEAN_UPPERS___": [list], "___TYPES_DICT___": {dict}, "___TYPE___": [list], "__val": 3.14, "child": {object} }, OBJECT: { "CleanUp": {###CLEAN_UPPER###}, "GetVal": function('TestSelfRef#GetVal, {partial}'), "___CLEAN_UPPERS___": [list], "___TYPES_DICT___": {dict}, "___TYPE___": [list], "__val": 6.28 } ]

" Execute (typevim#object#PrettyPrint: Compound Object w/ Self-Referencing Funcrefs):

" Execute (typevim#object#PrettyPrint: Multilevel Self-Referencing Compound Object):
