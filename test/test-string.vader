Include: AssertThrew.vader

Execute (typevim#string#EscapeChars: Throws BadValue on Empty Chars):
  AssertThrows call typevim#string#EscapeChars('abc', '')
  AssertThrew 'ERROR(BadValue)'

Execute (typevim#string#EscapeChars: Throws WrongType on Non-String Args):
  AssertThrows call typevim#string#EscapeChars('abc', 0)
  AssertThrew 'ERROR(WrongType)'

  AssertThrows call typevim#string#EscapeChars(0, '')
  AssertThrew 'ERROR(WrongType)'

  function! Foo()
  endfunction
  AssertThrows call typevim#string#EscapeChars(function('Foo'), '')
  AssertThrew 'ERROR(WrongType)'

Execute (typevim#string#EscapeChars: Works With the Docs Example):
  AssertEqual '\abc \a\a',    typevim#string#EscapeChars('abc aa', 'a')
  AssertEqual '\a\bc \a\a',   typevim#string#EscapeChars('abc aa', 'ab')
  AssertEqual '\\abc \\a\\a', typevim#string#EscapeChars('abc aa', 'aa')

Execute (typevim#string#EscapeChars: Replaces Backslashes Correctly):
  AssertEqual '\\\\\\', typevim#string#EscapeChars('\\\', '\')

Execute (typevim#string#EscapeChars: Interprets Multichar Sequences Literally):
  AssertEqual '\\abcdef', typevim#string#EscapeChars('abcdef', '\a\')

Execute (typevim#string#EscapeChars: Replaces Magic Single Characters):
  let g:test_str = '$1.01 * 10^3 \~= $500 * 2'
  AssertEqual '\\$1\\.01 \\* 10\\^3 \\\\~= \\$500 \\* 2',
      \ typevim#string#EscapeChars(g:test_str, '$.*~^\')

Execute (typevim#string#Listify: Agnostic, Empty List):
  let g:string = ''
  let g:expected = [
      \ '',
      \ ]
  AssertEqual g:expected, typevim#string#Listify(g:string)

Execute (typevim#string#Listify: Agnostic):
  let g:string = "\nfoobar\r\nbar\r\rfoo\n\rfoo\nbar\r"
  let g:expected = [
      \ '',
      \ 'foobar',
      \ 'bar',
      \ '',
      \ 'foo',
      \ 'foo',
      \ 'bar',
      \ ''
      \ ]
  AssertEqual g:expected, typevim#string#Listify(g:string)

Execute (typevim#string#Listify: Unix):
  let g:string = "\nfoobar\r\nbar\r\rfoo\n\rfoo\nbar\r"
  let g:expected = [
      \ '',
      \ "foobar\r",
      \ "bar\r\rfoo",
      \ "\rfoo",
      \ "bar\r",
      \ ]
  AssertEqual g:expected, typevim#string#Listify(g:string, 'unix')

Execute (typevim#string#Listify: DOS):
  let g:string = "\nfoobar\r\nbar\r\rfoo\n\rfoo\nbar\r"
  let g:expected = [
      \ '',
      \ "foobar",
      \ "bar\r\rfoo",
      \ "\rfoo",
      \ "bar\r",
      \ ]
  AssertEqual g:expected, typevim#string#Listify(g:string, 'dos')

Execute (typevim#string#Listify: Mac):
  let g:string = "\nfoobar\r\nbar\r\rfoo\n\rfoo\nbar\r"
  let g:expected = [
      \ "\nfoobar",
      \ "\nbar",
      \ '',
      \ "foo\n",
      \ "foo\nbar",
      \ ''
      \ ]
  AssertEqual g:expected, typevim#string#Listify(g:string, 'mac')

Execute (typevim#string#IndentList: Default Indent):
  let g:listified = [
      \ 'foobar',
      \ '  barfoo',
      \ 'gooqoz',
      \ ]
  let g:expected = [
      \ '  foobar',
      \ '    barfoo',
      \ '  gooqoz',
      \ ]
  AssertEqual g:expected, typevim#string#IndentList(g:listified)

Execute (typevim#string#IndentList: Tab Character):
  let g:listified = [
      \ 'foobar',
      \ '  barfoo',
      \ 'gooqoz',
      \ ]
  let g:expected = [
      \ "\tfoobar",
      \ "\t  barfoo",
      \ "\tgooqoz",
      \ ]
  AssertEqual g:expected, typevim#string#IndentList(g:listified, "\t")

Execute (typevim#string#IndentList: No Indentation):
  let g:listified = [
      \ 'foobar',
      \ '  barfoo',
      \ 'gooqoz',
      \ ]
  let g:expected = [
      \ 'foobar',
      \ '  barfoo',
      \ 'gooqoz',
      \ ]
  AssertEqual g:expected, typevim#string#IndentList(g:listified, '')
