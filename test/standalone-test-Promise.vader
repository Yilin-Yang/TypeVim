Include: AssertThrew.vader
Include: PromiseHelpers.vader

" **WHEN RUNNING THESE TESTS VISIBLY IN VIM,** it is necessary to skip
" the wall of error messages by *first* pressing Space (to go to the end of the
" messages), and then pressing Enter.

" NOTE: The nature of the Promise implementation's async callbacks makes
" it very difficult to test exception behavior. Since the 'Unhandled Promise
" rejection' occurs inside the timer'd callback, it is not possible (in
" standard vim, not neovim) to catch the thrown exception.
"
" This clutters the screen with error messages (-- More --, Press ENTER or type
" command to continue) that stop vader from fully executing this test suite in
" vim. Some tests are wrapped in an `if has('nvim')` for this reason.
Execute (typevim#Promise: Immediate Fulfillment):
  let g:promise = typevim#Promise#New()
  call g:promise.Then(function('SetVal'))
  call g:promise.Resolve('resolve')

  call YieldAndWait()

  AssertEqual 'resolve', GetValAndReset()
  AssertEqual 'resolve', g:promise.Get()
  AssertEqual 'fulfilled', g:promise.State()
Then (Test Error Handling, Post Resolution Resolve/Reject):
  " these should immediately and synchronously throw exceptions,
  " so no wait necessary
  AssertThrows call g:promise.Resolve('another')
  AssertThrew 'ERROR(NotAuthorized): Tried to resolve an already fulfilled Promise'
  AssertNotEqual 'another', GetValAndReset()
  AssertEqual 'fulfilled', g:promise.State()

  AssertThrows call g:promise.Reject('another')
  AssertThrew 'ERROR(NotAuthorized): Tried to reject an already fulfilled Promise'
  AssertEqual 'fulfilled', g:promise.State()

Execute (typevim#Promise: Rejects Malformed Arguments to Then):
  let g:promise = typevim#Promise#New()
  AssertThrows call g:promise.Then(0)
  AssertThrew 'ERROR(WrongType).*Resolve.*'

  let g:promise = typevim#Promise#New()
  AssertThrows call g:promise.Then(function('SetVal'), 0)
  AssertThrew 'ERROR(WrongType).*Reject.*'

Execute (typevim#Promise: State Progression, Resolution):
  let g:promise = typevim#Promise#New()
  AssertEqual 'pending', g:promise.State()
  AssertThrows call g:promise.Get()

  call g:promise.Then(function('SetVal'))
  AssertEqual 'pending', g:promise.State()
  AssertThrows call g:promise.Get()

  call g:promise.Resolve('fulfilled')
  " Should resolve asynchronously, so state should not change yet
  AssertEqual 'pending', g:promise.State()
  AssertThrows call g:promise.Get()

  call YieldAndWait()

  AssertEqual 'fulfilled', g:promise.State()

Execute (typevim#Promise: State Progression, Rejection):
  " Test state progression for rejection
  let g:promise = typevim#Promise#New()

  call g:promise.Then(function('SetVal'), function('SetOther'))
  AssertEqual 'pending', g:promise.State()
  AssertThrows call g:promise.Get()

  call g:promise.Reject('rejected')
  AssertEqual 'pending', g:promise.State()
  AssertThrows call g:promise.Get()

  call YieldAndCatchUnhandledReject()

  AssertEqual 'rejected', g:promise.State()

Execute (typevim#Promise: Immediate Rejection):
  let g:promise = typevim#Promise#New()
  call g:promise.Then(function('SetVal'), function('SetOther'))
  call g:promise.Reject('reject')

  call YieldAndWait()

  AssertEqual 'reject', GetOtherAndReset()
  AssertEqual 'reject', g:promise.Get()
  AssertEqual 'rejected', g:promise.State()
Then (Test Error Handling, Post Rejection Resolve/Reject):
  AssertThrows call g:promise.Resolve('another')
  AssertThrew 'ERROR(NotAuthorized): Tried to resolve an already rejected Promise'
  AssertNotEqual 'another', GetValAndReset()

  AssertThrows call g:promise.Reject('another')
  AssertThrew 'ERROR(NotAuthorized): Tried to reject an already rejected Promise'
  AssertNotEqual 'another', GetOtherAndReset()

Execute (typevim#Promise: Return Given Value from Resolve):
  let g:promise = typevim#Promise#New()
  AssertEqual 3.14, g:promise.Resolve(3.14)
  call YieldAndWait()
  call g:promise.Then(function('SetVal'), function('SetOther'))

  " TODO this test seems to mysteriously fail if we check this value
  " here?
  " AssertNotEqual 3.14, GetValAndReset()
  AssertEqual 'fulfilled', g:promise.State()
  call YieldAndWait()
  AssertEqual 3.14, GetValAndReset()

Execute (typevim#Promise: Return Given Value from Reject):
  let g:promise = typevim#Promise#New()
  call g:promise.Catch(function('ReturnZero'))  " don't throw unhandled reject
  AssertEqual 3.14, g:promise.Reject(3.14)
  call YieldAndWait()
  call g:promise.Then(function('SetVal'), function('SetOther'))

  " AssertNotEqual 3.14, GetOtherAndReset()
  AssertEqual 'rejected', g:promise.State()
  call YieldAndWait()
  AssertEqual 3.14, GetOtherAndReset()

Execute (typevim#Promise: Return Given Promise from Resolve):
  let g:promise = typevim#Promise#New()
  let g:another_promise = typevim#Promise#New()
  Assert g:another_promise is g:promise.Resolve(g:another_promise),
      \ 'Resolution with Promise did not return that Promise'

Execute (typevim#Promise: Attach Handlers to Already Resolved):
  let g:promise = typevim#Promise#New()
  call g:promise.Resolve('resolve')
  call g:promise.Then(function('SetVal'), function('SetOther'))
  AssertNotEqual 'resolve', GetValAndReset()
  call YieldAndWait()
  AssertEqual 'resolve', GetValAndReset()
  AssertNotEqual 'resolve', GetOtherAndReset()

Execute (typevim#Promise: Attach Handlers to Already Rejected):
  let g:promise = typevim#Promise#New()
  call g:promise.Reject('reject')  " don't call back till we attach handlers
  call g:promise.Then(function('SetVal'), function('SetOther'))
  call YieldAndWait()
  AssertNotEqual 'reject', GetValAndReset()
  AssertEqual 'reject', GetOtherAndReset()

Execute (typevim#Promise: Resolution w/out Success Handlers):
  let g:promise = typevim#Promise#New()
  call g:promise.Catch(function('SetOther'))
  call g:promise.Resolve('foo')
  call YieldAndWait()
  AssertEqual '', GetValAndReset()

Execute (typevim#Promise: Resolve Next-in-Chain w/out Success Handler):
  let g:promise = typevim#Promise#New()
  let g:last_link = g:promise.Catch(function('SetOther'))
  call g:promise.Resolve('foo')
  call YieldAndWait()
  AssertEqual '', GetValAndReset()

  " last_link should still resolve with an 'unmodified' value of 'foo'
  AssertEqual 'foo', g:last_link.Get()
  AssertEqual 'fulfilled', g:last_link.State()

Execute (typevim#Promise: Resolve/Reject Next-in-Chain, Non Funcref Arguments):
  if typevim#value#HasTimerTryCatchPatch()
    " This test fails spuriously if this patch is not supported.
    let g:to_resolve = typevim#Promise#New()
    let g:resolved = g:to_resolve.Then(v:null, v:null)

    let g:to_reject = typevim#Promise#New()
    let g:rejected = g:to_reject.Then(v:null, v:null)

    call g:to_resolve.Resolve('foo')
    call g:to_reject.Reject('foo')

    call YieldAndCatchUnhandledReject()

    AssertEqual 'foo', g:rejected.Get()
    AssertEqual 'rejected', g:rejected.State()

    " last_link should still resolve with an 'unmodified' value of 'foo'
    AssertEqual 'foo', g:resolved.Get()
    AssertEqual 'fulfilled', g:resolved.State()
  endif

Execute (typevim#Promise: Resolve with Pending Promise):
  let g:doer = MockDoer#New()
  let g:x = typevim#Promise#New(g:doer)
  let g:promise =  typevim#Promise#New()
  call g:promise.Resolve(g:x)
  AssertEqual 'pending', g:promise.State()
  call g:doer.Resolve('yes')
  AssertEqual 'pending', g:promise.State()

  call YieldAndWait()

  AssertEqual 'fulfilled', g:promise.State()
  AssertEqual 'yes', g:promise.Get()

Execute (typevim#Promise: Reject with Pending Promise):
  let g:doer = MockDoer#New()
  let g:x = typevim#Promise#New(g:doer)
  let g:promise =  typevim#Promise#New()
  call g:promise.Resolve(g:x)
  AssertEqual 'pending', g:promise.State()
  call g:doer.Reject('no')
  AssertEqual 'pending', g:x.State()
  call YieldAndCatchUnhandledReject()
  AssertEqual 'rejected', g:x.State()

  AssertEqual 'rejected', g:promise.State()
  AssertEqual 'no', g:promise.Get()

Execute (typevim#Promise: Resolve with Pending Promise, and Old Doer Resolves):
  let g:doer = MockDoer#New()
  let g:x = typevim#Promise#New(g:doer)
  let g:old_doer = MockDoer#New()
  let g:promise =  typevim#Promise#New(g:old_doer)

  " g:promise is now 'bound' to the state of g:x
  call g:promise.Resolve(g:x)

  " resolution of 'old' Doer should not affect this Promise's state
  call g:old_doer.Resolve('ja')
  call YieldAndWait()
  AssertEqual 'pending', g:promise.State()

  call g:doer.Resolve('yes')
  call YieldAndWait()
  AssertEqual 'fulfilled', g:promise.State()
  AssertEqual 'yes', g:promise.Get()

Execute (typevim#Promise: Resolve with Resolved Promise):
  let g:doer = MockDoer#New()
  let g:x = typevim#Promise#New(g:doer)
  let g:promise = typevim#Promise#New()
  call g:doer.Resolve('yes')
  call YieldAndWait()
  call g:promise.Resolve(g:x)
  call YieldAndWait()
  AssertEqual 'fulfilled', g:promise.State()
  AssertEqual 'yes', g:promise.Get()

Execute (typevim#Promise: Resolve with Rejected Promise):
  let g:doer = MockDoer#New()
  let g:x = typevim#Promise#New(g:doer)

  " silently 'pre-reject' this Promise
  call g:x.Catch(function('ReturnZero'))
  call g:doer.Reject('no')
  call YieldAndCatchUnhandledReject()

  let g:promise =  typevim#Promise#New()
  call g:promise.Resolve(g:x)
  try
    call YieldAndWait()
  catch /ERROR(NotFound)/
    let g:vader_exception = v:exception
    AssertThrew "ERROR(NotFound): Unhandled Promise rejection; rejected with reason: 'no'"
  endtry
  AssertEqual 'rejected', g:promise.State()
  AssertEqual 'no', g:promise.Get()

Execute (typevim#Promise: Resolve Promise with Itself):
  let g:promise = typevim#Promise#New()
  AssertThrows call g:promise.Resolve(g:promise)
  AssertThrew 'ERROR(BadValue): Tried to resolve a Promise with itself'

Execute (typevim#Promise: Rejection w/ Catch Handler):
  let g:promise = typevim#Promise#New()
  let g:result = g:promise.Catch(function('SetOther'))
  call g:promise.Reject('reject')
  call YieldAndCatchUnhandledReject()
  AssertEqual 'reject', GetOtherAndReset()
  AssertEqual 'reject', g:promise.Get()
  AssertEqual 'rejected', g:promise.State()
  AssertEqual 'fulfilled', g:result.State()

Execute (typevim#Promise: Throw Exception from Success Handler):
  let g:promise = typevim#Promise#New()
  let g:last_link = g:promise.Then(function('ThrowAsException'))
  try
    call g:promise.Resolve('foo')
    call YieldAndWait()
  catch /ERROR(NotFound)/
    let g:vader_exception = v:exception
    AssertThrew 'ERROR(NotFound): Unhandled Promise rejection; rejected with reason:'
  endtry

  " g:promise is resolved by the call to Resolve
  AssertEqual "foo", g:promise.Get()
  AssertEqual 'fulfilled', g:promise.State()

  " but, ThrowAsException throws an exception, which rejects last_link,
  " and last_link throws an exception due to the unhandled rejection
  AssertNotEqual -1, match(g:last_link.Get(), "except: 'foo'"),
      \ 'Had wrong exception text in last_link:'.g:last_link.Get()
  AssertEqual 'rejected', g:last_link.State()

Execute (typevim#Promise: Throw Exception from Error Handler):
  let g:promise = typevim#Promise#New()
  let g:last_link = g:promise.Catch(function('ThrowAsException'))
  call g:promise.Reject('foo')
  call YieldAndCatchUnhandledReject()

  " g:promise is rejected by the call to Reject, with 'foo' as its reason
  AssertEqual 'foo', g:promise.Get()
  AssertEqual 'rejected', g:promise.State()

  " g:last_link is also rejected, since g:promise's error handler threw an
  " exception
  " fuzzy-match, since thrown exceptions have weird numbers of quotes, sometimes
  AssertNotEqual -1, match(g:last_link.Get(), "except: [']*foo[']*")
  AssertEqual 'rejected', g:last_link.State()

Execute (typevim#Promise: Unhandled Promise Rejection):
  if has('nvim')
    let g:promise = typevim#Promise#New()
    call g:promise.Then(function('SetVal'))
    call g:promise.Reject('reject')
    call YieldAndCatchUnhandledReject()
    AssertEqual 'reject', g:promise.Get()
    AssertEqual 'rejected', g:promise.State()
  endif

Execute (typevim#Promise: Resolution by Doer):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  call g:promise.Then(function('SetVal'), function('SetOther'))
  call g:doer.Resolve('resolve')
  call YieldAndWait()
  AssertEqual    'resolve', GetValAndReset()
  AssertNotEqual 'resolve', GetOtherAndReset()
  AssertEqual 'resolve', g:promise.Get()
  AssertEqual 'fulfilled', g:promise.State()

Execute (typevim#Promise: Rejection by Doer):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  call g:promise.Then(function('SetVal'), function('SetOther'))
  call g:doer.Reject('reject')
  call YieldAndCatchUnhandledReject()
  AssertNotEqual 'reject', GetValAndReset()
  AssertEqual    'reject', GetOtherAndReset()
  AssertEqual 'reject', g:promise.Get()
  AssertEqual 'rejected', g:promise.State()

Execute (typevim#Promise: Test Promise Chaining):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  let g:next_link = g:promise.Then(function('ValPlusOne'), function('SetOther'))
  call g:doer.Resolve(0)
  call YieldAndWait()
  AssertEqual 1, g:next_link.Get()

Execute (typevim#Promise: Test Deep Promise Chaining):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  let g:last_link =
      \ g:promise.Then(function('ValPlusOne'), function('SetVal'))
      \.Then(function('ValPlusOne'), function('SetOther'))
  call g:doer.Resolve(0)
  call YieldAndWait()
  AssertEqual 2, g:last_link.Get()
  AssertEqual 'fulfilled', g:last_link.State()

Execute (typevim#Promise: Unhandled Rejection at End of Chain):
  if has('nvim')
    let g:doer = MockDoer#New()
    let g:promise = typevim#Promise#New(g:doer)
    let g:last_link =
        \ g:promise.Then(function('ValPlusOne'))
        \.Then(function('ValPlusOne'))
        \.Then(function('SetVal'))
    call g:doer.Reject('rejected')
    call YieldAndCatchUnhandledReject()
    AssertEqual 'rejected', g:last_link.Get()
    AssertEqual 'rejected', g:last_link.State()
    AssertNotEqual 'rejected', GetValAndReset()
  endif

Execute (typevim#Promise: Storage of Final Rejected Value in Chain):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  let g:last_link =
      \ g:promise.Then(function('SetVal'))
      \.Then(function('SetVal'))
      \.Then(function('SetVal'), function('SetOther'))

  call g:doer.Reject('reject')
  call YieldAndCatchUnhandledReject()
  AssertEqual 'reject', g:last_link.Get()
  AssertEqual 'fulfilled', g:last_link.State()

Execute (typevim#Promise: Rejection Handling w/ Chain of Then):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  let g:last_link =
      \ g:promise.Then(function('SetVal'))
      \.Then(function('SetVal'))
      \.Then(function('SetVal'), function('SetOther'))

  call g:doer.Reject('reject')
  call YieldAndCatchUnhandledReject()
  AssertEqual 'fulfilled', g:last_link.State()

  AssertEqual 'reject', GetOtherAndReset()
  AssertNotEqual 'reject', GetValAndReset()

Execute (typevim#Promise: Rejection Handling w/ Then, Terminate with Catch):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  let g:last_link =
      \ g:promise.Then(function('SetVal'))
      \.Then(function('SetVal'))
      \.Then(function('SetVal'))
      \.Catch(function('SetOther'))

  call g:doer.Reject('reject')
  call YieldAndCatchUnhandledReject()
  AssertEqual 'fulfilled', g:last_link.State()

  AssertEqual 'reject', GetOtherAndReset()
  AssertNotEqual 'reject', GetValAndReset()

Execute (typevim#Promise: "Interception" of Unhandled Rejection):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  let g:last_rejected =
      \ g:promise.Then(function('SetVal'))
      \.Then(function('SetVal'))
      \.Then(function('SetVal'))
  let g:last_link =
      \ g:last_rejected
      \.Catch(function('SetOther'))
      \.Then(function('SetVal2'))
      \.Then(function('SetVal2'))
      \.Then(function('SetVal2'), function('SetOther2'))

  call g:doer.Reject('reject')
  call YieldAndCatchUnhandledReject()
  AssertEqual 'rejected', g:promise.State()
  AssertEqual 'rejected', g:last_rejected.State()
  AssertEqual 'fulfilled', g:last_link.State()

  AssertEqual 'reject', GetOtherAndReset()
  AssertNotEqual 'reject', GetValAndReset()
  AssertEqual 'reject', GetVal2AndReset()
  AssertNotEqual 'reject', GetOther2AndReset()

Execute (typevim#Promise: Resolve with a Dict That's Not a TypeVim Object):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  call g:promise.Then(function('SetVal'))
  call g:promise.Resolve({})
  call YieldAndWait()
Then:
  AssertEqual {}, GetValAndReset()

Execute (typevim#Promise: Reject with a Dict That's Not a TypeVim Object):
  let g:doer = MockDoer#New()
  let g:promise = typevim#Promise#New(g:doer)
  call g:promise.Then(function('SetVal'), function('SetOther'))
  call g:promise.Reject({})
  call YieldAndCatchUnhandledReject()
Then:
  AssertEqual {}, GetOtherAndReset()

Execute (typevim#Promise: Call to onFulfilled Supplies No "this"):
  let g:promise = typevim#Promise#New()
  call g:promise.Then(function('SetIfNoDict'))

  try
    call g:promise.Resolve('foo')
  catch /E725/  " Calling dict function without Dictionary
  endtry

Then:
  call AssertNotInvoked()

Execute (typevim#Promise: Call to onRejected Supplies No "this"):
  if has('nvim')
    let g:promise = typevim#Promise#New()
    call g:promise.Then(function('ReturnZero'), function('SetIfNoDict'))

    call g:promise.Reject('foo')
    try
      call YieldAndWait()
    catch /E725/  " Calling dict function without Dictionary
    endtry
    call AssertNotInvoked()
  endif

Execute (typevim#Promise: Delayed Call to onFulfilled Supplies No "this"):
  if has('nvim')
    let g:doer = MockDoer#New()
    let g:promise = typevim#Promise#New(g:doer)
    call g:promise.Then(function('SetIfNoDict'))

    call g:doer.Resolve('foo')
    try
      call YieldAndWait()
    catch /E725/  " Calling dict function without Dictionary
    endtry
    call AssertNotInvoked()
  endif

Execute (typevim#Promise: Delayed Call to onRejected Supplies No "this"):
  if has('nvim')
    let g:doer = MockDoer#New()
    let g:promise = typevim#Promise#New(g:doer)
    call g:promise.Then(function('ReturnZero'), function('SetIfNoDict'))

    call g:doer.Reject('foo')
    try
      call YieldAndWait()
    catch /E725/  " Calling dict function without Dictionary
    endtry
    call AssertNotInvoked()
  endif

Execute (typevim#Promise: Resolution Occurs Asynchronously, "On Next Loop"):
  " Invocation of a Promise's Then() callbacks should not occur *immediately*,
  " even if the Promise had already resolved; it should always occur
  " asynchronously, after the function setting the Then() callbacks and its
  " stack have run to completion, in order to avoid race conditions.
  "
  " See Promises/A+ 2.2.4.
  if typevim#value#HasTimerTryCatchPatch()
    let g:promise = typevim#Promise#New()
    call g:promise.Resolve('___')
    call g:promise.Then(function('SucceedIffAsync'))

    call ClearExecContextAndWait()
    call AssertCallbackWasAsync()
  endif

Execute (typevim#Promise: Rejection Occurs Asynchronously, "On Next Loop"):
  " Invocation of a Promise's Then() callbacks should not occur *immediately*,
  " even if the Promise had already resolved; it should always occur
  " asynchronously, after the function setting the Then() callbacks and its
  " stack have run to completion, in order to avoid race conditions.
  "
  " See Promises/A+ 2.2.4.
  if typevim#value#HasTimerTryCatchPatch()
    let g:promise = typevim#Promise#New()
    call g:promise.Then(function('ReturnZero'), function('ReturnZero'))
    call g:promise.Reject('___')
    call g:promise.Then(function('ReturnZero'), function('SucceedIffAsync'))

    call ClearExecContextAndWait()
    call AssertCallbackWasAsync()
  endif
