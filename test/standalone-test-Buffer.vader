Include: AssertThrew.vader

Execute (Buffer: sets default bufsettings on open):
  let g:buffer = typevim#Buffer#New()
  call g:buffer.Open()
Then:
  AssertEqual 'hide',   &bufhidden
  AssertEqual 0,        &buflisted
  AssertEqual 'nofile', &buftype
  AssertEqual 0,        &swapfile

Execute (Buffer: setbufvar() can set a buffer-local variable):
  let g:buffer = typevim#Buffer#New()
  call g:buffer.setbufvar('test_var', 1)
  call g:buffer.Open()
Then:
  AssertEqual 1, b:test_var

Execute (Buffer: getbufvar() can return a buffer-local variable):
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')
  AssertEqual 1, g:buffer.getbufvar('test_var')

Execute (Buffer: ExchangeBufVars() works ):
  AssertEqual 1, g:buffer.getbufvar('&modifiable')
  let g:old_vals = g:buffer.ExchangeBufVars({'&modifiable': 0, '&buftype': '', 'test_var': ''})

  AssertEqual 0, g:buffer.getbufvar('&modifiable')
  AssertEqual '', g:buffer.getbufvar('&buftype')
  AssertEqual '', g:buffer.getbufvar('test_var')

  let g:new_vals = g:buffer.ExchangeBufVars(g:old_vals)

  AssertEqual 1,        g:buffer.getbufvar('&modifiable')
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')
  AssertEqual 1,        g:buffer.getbufvar('test_var')

Execute (Buffer: setbufvar()/getbufvar() throw ERROR(NotFound) if the managed buffer doesn't exist):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
  execute 'bwipeout! '.g:buffer.bufnr()

  AssertThrows call g:buffer.setbufvar('test_var', 1)
  AssertThrew 'ERROR(NotFound)'

  AssertThrows call g:buffer.getbufvar('test_var')
  AssertThrew 'ERROR(NotFound)'
Then:
  call g:buffer.SetBuffer(bufnr('%'))

Execute (Buffer: SetDoRestore() Works and gives the return value when given funcref):
  function! Foo() abort
    return 42
  endfunction
  AssertEqual 42, g:buffer.SetDoRestore({'&buftype': ''}, function('Foo'))
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')

Execute (Buffer: SetDoRestore() restores settings on badvalue exception):
  function! Foo(unused_var) abort
    return 42
  endfunction
  AssertThrows call g:buffer.SetDoRestore({'&buftype': ''}, function('Foo'))
  AssertThrew 'ERROR(BadValue)'
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')

Execute (Buffer: SetDoRestore() restores settings on arbitrary exceptions):
  function! Foo() abort
    throw 'AAAAAA'
  endfunction
  AssertThrows call g:buffer.SetDoRestore({'&buftype': ''}, function('Foo'))
  AssertThrew 'AAAAAA'
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')

Execute (Buffer: SetDoRestore() can :execute a "multiline" pipe-separated string command):
  AssertEqual 0, g:buffer.SetDoRestore({'&buftype': ''}, 'let g:foo = "bar" | let g:bar = "foo"')
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')
  AssertEqual 'bar', g:foo
  AssertEqual 'foo', g:bar
  unlet g:foo
  unlet g:bar

Execute (Buffer: SetDoRestore() restores settings when given command throws exception):
  AssertThrows call g:buffer.SetDoRestore({'&buftype': ''}, 'throw "AAAAAA"')
  AssertThrew "AAAAAA"
  AssertEqual 'nofile', g:buffer.getbufvar('&buftype')

Execute (Buffer: Declare Helpers for Checking Before-and-After):
  function! SaveState() abort
    set nolazyredraw
    let l:tabpage = tabpagenr()
    let l:winview = winsaveview()
    return [l:tabpage, l:winview]
  endfunction

  function! AssertSameState(tabp_and_winview) abort
    call maktaba#ensure#IsList(a:tabp_and_winview)
    AssertEqual 0, &lazyredraw
    AssertEqual a:tabp_and_winview[0], tabpagenr()
    AssertEqual a:tabp_and_winview[1], winsaveview()
  endfunction

Execute (Buffer: OpenDoRestore() works and gives return value when given funcref):
  function! Foo() abort
    let b:foobar = 1
    return 42
  endfunction

  let g:state = SaveState()
  AssertEqual 42, g:buffer.OpenDoRestore(function('Foo'))
  AssertEqual 1, g:buffer.getbufvar('foobar')
  call AssertSameState(g:state)

Execute (Buffer: OpenDoRestore() works when `:execute`ing a pipe-separated string command):
  let g:state = SaveState()
  AssertEqual 0, g:buffer.OpenDoRestore('let b:barfoo = 2 | let b:goofar = 3')
  AssertEqual 2, g:buffer.getbufvar('barfoo')
  AssertEqual 3, g:buffer.getbufvar('goofar')
  call AssertSameState(g:state)

Execute (Buffer: OpenDoRestore() restores everything on funcref BadValue exception):
  function! Foo(unused) abort
    return 42
  endfunction

  let g:state = SaveState()
  AssertThrows call g:buffer.OpenDoRestore(function('Foo'))
  AssertThrew 'ERROR(BadValue)'
  call AssertSameState(g:state)

Execute (Buffer: OpenDoRestore() restores everything when given a bad string command):
  let g:state = SaveState()
  AssertThrows call g:buffer.OpenDoRestore("throw 'BBBBB'")
  AssertThrew 'BBBBB'
  call AssertSameState(g:state)

" Since split moves the cursor to the new split, check relative position by
" moving *back* to the original window and checking that it *isn't* the owned
" buffer.
Execute (Buffer: opens a horizontal split correctly):
  call g:buffer.setbufvar('test_var', 1)
  tabnew
  call g:buffer.split('', 'botright')
Then:
  Assert exists('b:test_var'), "Buffer wasn't open after split"
  wincmd k
  Assert !exists('b:test_var'), "Buffer opened in the wrong position"

Execute (Buffer: opens a vertical split cirrectly):
  call g:buffer.setbufvar('test_var', 1)
  tabnew
  call g:buffer.vsplit('', 'botright')
Then:
  Assert exists('b:test_var'), "Buffer wasn't open after split"
  wincmd h
  Assert !exists('b:test_var'), "Buffer opened in the wrong position"

Execute (Buffer: split/vsplit throw ERROR(NotFound) when buf no longer exists):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
  execute 'bwipeout! '.g:buffer.bufnr()

  AssertThrows call g:buffer.split()
  AssertThrew 'ERROR(NotFound)'

  AssertThrows call g:buffer.vsplit()
  AssertThrew 'ERROR(NotFound)'

Execute (Buffer: SetBuffer() can :bwipeout the old buffer):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
  let g:bufnr = g:buffer.bufnr()
  AssertEqual g:bufnr, g:buffer.SetBuffer(bufnr('%'), 'bwipeout')
  Assert !bufexists(g:bufnr), 'Did not :bwipeout replaced buffer'

Execute (Buffer: SetBuffer() can replace a bwipeout'd buffer):
  tabnew
  let g:bufnr = bufnr('%')
  call g:buffer.SetBuffer(g:bufnr)
  execute 'bwipeout! '.g:bufnr
  call g:buffer.SetBuffer(bufnr('%'))  " shouldn't throw

Execute (Buffer: SetBuffer() throws ERROR(NotFound) when trying to modify a bwipeout'd buffer):
  tabnew
  let g:bufnr = bufnr('%')
  call g:buffer.SetBuffer(g:bufnr)
  execute 'bwipeout! '.g:bufnr
  let g:new_bufnr = bufnr('%')
  let g:actions = ['bunload', 'bdelete', 'bwipeout']
  for g:act in g:actions
    for g:force in [0, 1]
      AssertThrows call g:buffer.SetBuffer(g:new_bufnr, g:act, g:force)
      AssertThrew 'ERROR(NotFound)'
    endfor
  endfor

Given (One Line of Text):
  first line

Execute (Buffer: NumLines() Returns 1):
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 1, g:buffer.NumLines()

Given (Two Lines of Text):
  first line
  two line

Execute (Buffer: NumLines() Returns 2):
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 2, g:buffer.NumLines()

Given (Three Lines of Text):
  first line
  second line
  third line

Execute (Buffer: NumLines() Returns 3):
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 3, g:buffer.NumLines()


Given (Ten Lines of Text):
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: GetLines() can return a single line):
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual ['first line'], g:buffer.GetLines(1)

Execute (Buffer: GetLines() can return all lines):
  let g:expected = [
      \ 'first line',
      \ 'second line',
      \ 'third line',
      \ 'fourth line',
      \ 'fifth line',
      \ 'sixth line',
      \ 'seventh line',
      \ 'eighth line',
      \ 'ninth line',
      \ 'tenth line',
      \ ]
  AssertEqual g:expected, g:buffer.GetLines(1, -1)

Execute (Buffer: GetLines() can return a specific range of lines):
  let g:expected = [
      \ 'fourth line',
      \ 'fifth line',
      \ 'sixth line',
      \ 'seventh line',
      \ ]
  AssertEqual g:expected, g:buffer.GetLines(4, 7)

Execute (Buffer: can DeleteLines() a range of lines):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.DeleteLines(1, 5)
Expect:
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: can DeleteLines() the entire buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.DeleteLines(1, -1)
Expect:
  

Execute (Buffer: can ReplaceLines() a range of lines with fewer lines):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.ReplaceLines(1, 5, g:lines)
Expect:
  foo1
  foo2
  foo3
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: can ReplaceLines() a single line with multiple lines):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.ReplaceLines(1, 1, g:lines)
Expect:
  foo1
  foo2
  foo3
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: can ReplaceLines() the last lines with an explicit range):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.ReplaceLines(6, 10, g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  foo1
  foo2
  foo3

Execute (Buffer: can ReplaceLines() everything with an explicit range):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.ReplaceLines(1, 10, g:lines)
Expect:
  foo1
  foo2
  foo3

Execute (Buffer: DeleteLines() can delete everything with an explicit line range):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.DeleteLines(1, 10)
Expect:
  

Execute (Buffer: InsertLines() can prepend lines to the buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines(0, g:lines)
Expect:
  foo1
  foo2
  foo3
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: can InsertLines() midway through the buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines(2, g:lines)
Expect:
  first line
  second line
  foo1
  foo2
  foo3
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (Buffer: can InsertLines() at the end of the buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines('$', g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
  foo1
  foo2
  foo3

Execute (Buffer: can InsertLines() at the end w/ explicit line number):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines(10, g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
  foo1
  foo2
  foo3

Execute (Buffer: can InsertLines() at end w/ explicit line number past-the-end):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines(11, g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
  foo1
  foo2
  foo3

Execute (Buffer: Insert Lines At End w/ Explicit Line Number Past-the-End):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines(11, g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
  foo1
  foo2
  foo3

Execute (Buffer: Insert Lines At End w/ Negative Indexing):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines(-1, g:lines)
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
  foo1
  foo2
  foo3

Execute (Buffer: ReplaceLines() rejects an endline before startline):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = []
  AssertThrows call g:buffer.ReplaceLines(4, 2, g:lines)
  AssertThrew 'ERROR(BadValue)'

Execute (Buffer: ReplaceLines() rejects endline before startline (both negative)):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = []
  AssertThrows call g:buffer.ReplaceLines(-4, -5, g:lines)
  AssertThrew 'ERROR(BadValue)'

Execute (Buffer: ReplaceLines() rejects endline before (negative) startline):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = []
  AssertThrows call g:buffer.ReplaceLines(-8, 2, g:lines)
  AssertThrew 'ERROR(BadValue)'

Execute (Buffer: ReplaceLines() rejects endline (negative) before startline):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = []
  AssertThrows call g:buffer.ReplaceLines(4, -8, g:lines)
  AssertThrew 'ERROR(BadValue)'

Execute (Buffer: ReplaceLines() rejects negative values that are out of range):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:lines = []
  AssertThrows call g:buffer.ReplaceLines(-12, -8, g:lines)
  AssertThrew 'ERROR(BadValue)'

Execute (Buffer: Make Buffer Nonmodifiable (Setup)):
  " just make sure this is working properly
  call g:buffer.setbufvar('&modifiable', 0)
Then:
  AssertEqual 0, g:buffer.getbufvar('&modifiable')

Execute (Buffer: DeleteLines() can delete lines even when buffer is nonmodifiable):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.setbufvar('&modifiable', 0)
  call g:buffer.DeleteLines(1, 5)
Expect:
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
Then:
  AssertEqual 0, g:buffer.getbufvar('&modifiable')

Execute (Buffer: can DeleteLines() everything from a nonmodifiable buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.setbufvar('&modifiable', 0)
  call g:buffer.DeleteLines(1, -1)
Expect:
  
Then:
  AssertEqual 0, g:buffer.getbufvar('&modifiable')

Execute (Buffer: can ReplaceLines() in a nonmodifiable buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.setbufvar('&modifiable', 0)
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.ReplaceLines(1, 5, g:lines)
Expect:
  foo1
  foo2
  foo3
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
Then:
  AssertEqual 0, g:buffer.getbufvar('&modifiable')

Execute (Buffer: InsertLines() can prepend lines in a nonmodifiable buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  call g:buffer.setbufvar('&modifiable', 0)
  let g:lines = [
    \ 'foo1',
    \ 'foo2',
    \ 'foo3',
  \ ]
  call g:buffer.InsertLines(0, g:lines)
Expect:
  foo1
  foo2
  foo3
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line
Then:
  AssertEqual 0, g:buffer.getbufvar('&modifiable')

Given (Searchable Text):
  the quick brown fox
  jumps over the lazy
  dog

Execute (Buffer: Search Setup, Disable Lazyredraw, Wraparound):
  " so that we can test that lazyredraw and wrapscan are being restored properly
  set nowrapscan
  set nolazyredraw

Execute (Buffer: Search() works from w/in buffer):
  " the position of the cursor should not affect the search, the cursor
  " position should be restored afterward, total number of tabs shouldn't
  " change
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  normal! 3G
  let g:num_tabs = tabpagenr('$')
  let g:curpos = getcurpos()

  AssertEqual 2, g:buffer.search('the')

  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  AssertEqual g:num_tabs, tabpagenr('$'), 'Failed to close new tabpage'
  AssertEqual g:curpos, getcurpos()

Execute (Buffer: Search() works from another buffer):
  call g:buffer.SetBuffer(bufnr('%'))
  tabnew
  let g:bufnr = bufnr('%')

  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  AssertEqual 2, g:buffer.search('the')
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

  " tabnew'd buffer should be open
  AssertEqual g:bufnr, bufnr('%')

Execute (Buffer: will Search() from good line number):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 2, g:buffer.search('the', '', 2)
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

Execute (Buffer: won't Search() from bad line number):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  let g:num_tabs = tabpagenr('$')
  let g:curpos = getcurpos()
  AssertThrows call g:buffer.search('the', '', -10)
  AssertThrew 'ERROR(BadValue)'
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  AssertEqual g:num_tabs, tabpagenr('$'), 'Failed to close new tabpage'
  AssertEqual g:curpos, getcurpos()

Execute (Buffer: Search() fails when given a too-constraining stopline):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  let g:curpos = getcurpos()
  AssertEqual 0, g:buffer.search('dog', '', 1, 1)
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

" explicitly calling g:buffer.search() from the command line doesn't
" always return to the old tabpage without an explicit :tabnext <TABNR> call
" **THIS TEST DOES NOT EXPOSE THAT BUGGY BEHAVIOR** but is included for
" thoroughness, and in case we can get the test working in the future
Do (Buffer: returns to old tab after cmdline search):
  :-tabnew\<cr>
  iI am the man who arranges the blocks that descend upon\<cr>
  me from up above, they come down and I spin them around\<esc>
  :call g:buffer.SetBuffer(bufnr('%'))\<cr>
  :tabclose\<cr>
  :let g:curpos = getcurpos()\<cr>
  :let g:result = g:buffer.search('the')\<cr>
Then:
  call g:buffer.CleanUp()
  AssertEqual 1, g:result
  AssertEqual g:curpos, getcurpos()

Execute (Buffer: Search() will wraparound with proper flags):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 1, g:buffer.search('the', 'w', 3)
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

Execute (Buffer: won't wraparound in Search() with no-wraparound flag):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 0, g:buffer.search('the', 'W', 3)
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

Execute (Buffer: won't Search() from curpos w/out 'c'):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 2, g:buffer.search('the', 'W', [1, 1])
  AssertEqual 0, g:buffer.search('the', 'W', [2, 12])
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

Execute (Buffer: can Search() from curpos w/ 'c'):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 1, g:buffer.search('the', 'c', [1, 1])
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

  AssertEqual 2, g:buffer.search('the', 'c', [2, 12])
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

Execute (Buffer: won't Search() w/ bad flags):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  AssertThrows call g:buffer.search('the', 'D')
  AssertThrew 'ERROR(BadValue)'
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

  AssertThrows call g:buffer.search('the', 's')
  AssertThrows call g:buffer.search('the', 'cez')

Execute (Buffer: will Search() w/ bad flags if told to ignore them):
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  call g:buffer.SetBuffer(bufnr('%'))
  AssertEqual 2, g:buffer.search('the', 'D', 1, 0, 0, 1)
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

Execute (Buffer: search() rejects bad curpos args with wrong input list size):
  call g:buffer.SetBuffer(bufnr('%'))

  " empty
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  AssertThrows call g:buffer.search('the', '', [])
  AssertThrew 'ERROR(BadValue)'

  " one elt
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  AssertThrows call g:buffer.search('the', '', [2])
  AssertThrew 'ERROR(BadValue)'

  " three elts
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  AssertThrows call g:buffer.search('the', '', [2, 1, 5])
  AssertThrew 'ERROR(BadValue)'

  " six elts
  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan
  AssertThrows call g:buffer.search('the', '', [2, 1, 5, 10, 10, 3])
  AssertThrew 'ERROR(BadValue)'

  AssertEqual 0, &lazyredraw
  AssertEqual 0, &wrapscan

Execute (Buffer: IsOpen(), IsOpenInTab() work when its open in the current window):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
Then:
  AssertEqual 1, g:buffer.IsOpen()
  AssertEqual 1, g:buffer.IsOpenInTab()
  AssertEqual 1, g:buffer.IsOpenInTab(tabpagenr())

Execute (Buffer: IsOpen(), IsOpenInTab() work when its open in the previous tab but not the current):
  call g:buffer.SetBuffer(bufnr('%'))
  let g:old_tab = tabpagenr()
  tabnew
Then:
  AssertEqual 1, g:buffer.IsOpen()
  AssertEqual 1, g:buffer.IsOpenInTab(g:old_tab)
  AssertEqual 0, g:buffer.IsOpenInTab()
  AssertEqual 0, g:buffer.IsOpenInTab(tabpagenr())

Execute (Buffer: IsOpen(), IsOpenInTab() return 1 when open in previous tab, and in current):
  call g:buffer.Open()
Then:
  AssertEqual 1, g:buffer.IsOpenInTab(g:old_tab)
  AssertEqual 1, g:buffer.IsOpen()
  AssertEqual 1, g:buffer.IsOpenInTab()
  AssertEqual 1, g:buffer.IsOpenInTab(tabpagenr())

Execute (Buffer: IsOpen(), IsOpenInTab() return zero is not open at all):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
  tabnew
  call g:buffer.CleanUp()
Then:
  AssertEqual 0, g:buffer.IsOpen()
  AssertEqual 0, g:buffer.IsOpenInTab(g:old_tab)
  AssertEqual 0, g:buffer.IsOpenInTab()
  AssertEqual 0, g:buffer.IsOpenInTab(tabpagenr())

Execute (Buffer: won't Switch() if the buffer isn't open anywhere):
  AssertThrows call g:buffer.Switch()
  AssertThrew 'ERROR(NotFound)'

Execute (Buffer: Switch() succeeds if the buffer is already open in the current window):
  call g:buffer.SetBuffer(bufnr('%'))
  tabnew
  let g:tabnr = tabpagenr()
  call g:buffer.Open()
  call g:buffer.Switch()
Then:
  AssertEqual g:tabnr, tabpagenr()
  AssertEqual g:buffer.bufnr(), bufnr('%')

Execute (Buffer: won't Switch() to a different tab if that tab isn't given and exact match is required):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
  let g:tabnr = tabpagenr()
  tabnew
Then:
  AssertThrows call g:buffer.Switch(0)
  AssertThrew 'ERROR(NotFound)'

Execute (Buffer: will Switch() to a different tab if a specific tab isn't given and no exact match is required):
  call g:buffer.Switch()
Then:
  AssertEqual g:tabnr, tabpagenr()
  AssertEqual g:buffer.bufnr(), bufnr('%')

Execute (Buffer: Switch()es to a different tab when that tab is given):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
  let g:tabnr = tabpagenr()
  tabnew
  call g:buffer.Switch(0, g:tabnr)
Then:
  AssertEqual g:tabnr, tabpagenr()
  AssertEqual g:buffer.bufnr(), bufnr('%')

Execute (Buffer: Switch()es to a different tab if told to do so, when also open in current tab):
  tabnew
  call g:buffer.SetBuffer(bufnr('%'))
  let g:tabnr = tabpagenr()
  tabnew
  call g:buffer.Open()
  call g:buffer.Switch(0, g:tabnr)
Then:
  AssertEqual g:tabnr, tabpagenr()
  AssertEqual g:buffer.bufnr(), bufnr('%')

Execute (Buffer: returns 0 for IsOpen when buf no longer exists):
  execute 'bwipeout! '.g:buffer.bufnr()
  AssertEqual 0, g:buffer.IsOpen()
  AssertEqual 0, g:buffer.IsOpenInTab()

Execute (Buffer: throws ERROR(NotFound) on Open() when buf no longer exists):
  AssertThrows call g:buffer.Open()
  AssertThrew 'ERROR(NotFound)'

Execute (Buffer: throws ERROR(NotFound) on CleanUp() when buf no longer exists):
  AssertThrows call g:buffer.CleanUp()
  AssertThrew 'ERROR(NotFound)'

Execute (Buffer: throws ERROR(NotFound) on search() when buf no longer exists):
  AssertEqual 0, &lazyredraw
  AssertThrows call g:buffer.search('.*', 'c', 1)
  AssertThrew 'ERROR(NotFound).*buffer.*'
  AssertEqual 0, &lazyredraw
