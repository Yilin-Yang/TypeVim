Execute (typevim#make#Class: Rudimentary Class):
  let g:obj = TestBase#New(3.14)
  call typevim#ensure#IsType(g:obj, 'TestBase')
  AssertEqual ['TestBase'], g:obj[typevim#attribute#TYPE()]
  AssertEqual 0, g:obj.CleanUp(), 'Object not initialized with default clean-upper.'
  Assert !has_key(g:obj, typevim#attribute#CLEAN_UPPER_LIST()),
      \ printf('Had a clean-upper list when it should not have: %s',
      \ typevim#object#ShallowPrint(g:obj))
Then (Invoke Functions):
  AssertEqual 3.14, g:obj.GetVal()
  call g:obj.SetVal('foo')
  AssertEqual 'foo', g:obj.GetVal()

Execute (typevim#make#Class: Class with Simple Destructor):
  let g:obj = TestBase#New(3.14, function('TestBase#CleanUp'))
  call typevim#ensure#IsType(g:obj, 'TestBase')
  AssertEqual ['TestBase'], g:obj[typevim#attribute#TYPE()]
  AssertEqual 1, g:obj.CleanUp(),
      \ 'Object not initialized with given clean-upper.'
  Assert !has_key(g:obj, typevim#attribute#CLEAN_UPPER_LIST()),
      \ printf('Had a clean-upper list when it should not have: %s',
      \ typevim#object#ShallowPrint(g:obj))

Execute (typevim#make#Derived: Derived Class, No Base Dtor):
  let g:der = TestDerived#New(0, 0, 0)
  call typevim#ensure#IsType(g:der, 'TestBase')
  call typevim#ensure#IsType(g:der, 'TestDerived')
  Assert !has_key(g:der, typevim#attribute#CLEAN_UPPER_LIST()),
      \ printf('Had a clean-upper list when it should not have: %s',
      \ typevim#object#ShallowPrint(g:der, 2))

Execute (typevim#make#Derived: Derived Class, With Base Dtor):
  let g:der = TestDerived#New(1, 0, 0)
  call typevim#ensure#IsType(g:der, 'TestBase')
  call typevim#ensure#IsType(g:der, 'TestDerived')
  AssertEqual ['TestBase', 'TestDerived'], g:der[typevim#attribute#TYPE()]
  Assert has_key(g:der, typevim#attribute#CLEAN_UPPER_LIST()),
      \ printf('Did not have a clean-upper list when it should have: %s',
      \ typevim#object#ShallowPrint(g:der, 2))
  AssertEqual 2, len(g:der[typevim#attribute#CLEAN_UPPER_LIST()])

Then (Check Error Messages from Default Virtual Function):
  AssertThrows call g:der.SmallVirtual()
  " Not enough arguments...
  AssertNotEqual -1, match(g:vader_exception, 'E119'),
      \ 'Threw wrong exception, should be E119: '.g:vader_exception

  AssertThrows call g:der.SmallVirtual('foo', 'boo')
  " Too many arguments for...
  AssertNotEqual -1, match(g:vader_exception, 'E118'),
      \ 'Threw wrong exception, should be E118: '.g:vader_exception

  AssertThrows call g:der.MediumVirtual('foo', 'boo')
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(NotImplemented)'),
      \ 'Threw wrong exception, should be NotImplemented: '.g:vader_exception

  " specify optional
  AssertThrows call g:der.MediumVirtual('foo', 'boo', 'roo')
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(NotImplemented)'),
      \ 'Threw wrong exception, should be NotImplemented: '.g:vader_exception

  " specify too many optional
  AssertThrows call g:der.MediumVirtual('foo', 'boo', 'roo', 'aaaaah')
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(InvalidArguments)'),
      \ 'Threw wrong exception, should be InvalidArguments: '.g:vader_exception

  " specify too many optional
  AssertThrows call g:der.BigVirtual('foo', 'boo', 'roo', 'aaaaah')
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(NotImplemented)'),
      \ 'Threw wrong exception, should be NotImplemented: '.g:vader_exception

Execute (typevim#make#Derived: Derived Class, Fail to Clobber Member Variables):
  AssertThrows let g:der = TestDerived#New(1, 1, 0)
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(NotAuthorized)'),
      \ 'Threw wrong exception, should be NotAuthorized: '.g:vader_exception

Execute (typevim#make#Derived: Derived Class, Clobber Member Variables):
  let g:der = TestDerived#New(1, 1, 1)
  AssertEqual '-1010', g:der['__val']
