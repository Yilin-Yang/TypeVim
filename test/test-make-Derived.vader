Include: AssertThrew.vader

Execute (typevim#make#Derived: Derived Class, No Base Dtor):
  let g:der = TestDerived#New(0, 0, 0)
  call typevim#ensure#IsType(g:der, 'TestBase')
  call typevim#ensure#IsType(g:der, 'TestDerived')
  let g:type_list = g:der[typevim#attribute#TYPE()]
  AssertEqual ['TestBase', 'TestDerived'], g:type_list
Then (Run Destructor):
  call g:der.CleanUp()
  Assert !exists('g:base_dtor_called')
  AssertEqual 1, g:derived_dtor_called

Execute (typevim#make#Derived: Test Function Overriding):
  let g:der = TestDerived#New(0, 0, 0)
  AssertEqual 'overridden', g:der.GetVal()

Execute (typevim#make#Derived: Derived Class, Run Clean Uppers in Order):
  let g:der = TestDerived#New(1, 0, 0)
  call g:der.CleanUp()
Then:
  AssertEqual 1, g:base_dtor_called
  AssertEqual 1, g:derived_dtor_called

Execute (typevim#make#Derived: Three-Level Derived, Run Parent/GrandParent Clean-Uppers):
  let g:der = TestThirdLevel#New(3.14)
  call g:der.CleanUp()
Then:
  AssertEqual 1, g:base_dtor_called
  AssertEqual 1, g:derived_dtor_called

Execute (typevim#make#Derived: Three-Level Derived, Run All Three):
  let g:der = TestThirdLevel#New(3.14, 1)
  call g:der.CleanUp()
Then:
  AssertEqual 1, g:base_dtor_called
  AssertEqual 1, g:derived_dtor_called
  AssertEqual 1, g:third_level_dtor_called

Execute (typevim#make#Derived: Derived Class, With Base Dtor; Run Dtors):
  let g:der = TestDerived#New(1, 0, 0)
  call typevim#ensure#IsType(g:der, 'TestBase')
  call typevim#ensure#IsType(g:der, 'TestDerived')
  AssertEqual ['TestBase', 'TestDerived'], g:der[typevim#attribute#TYPE()]
  Assert has_key(g:der, typevim#attribute#CLEAN_UPPER_LIST()),
      \ printf('Did not have a clean-upper list when it should have: %s',
      \ typevim#object#ShallowPrint(g:der, 2))
  AssertEqual 2, len(g:der[typevim#attribute#CLEAN_UPPER_LIST()])

Then (Check Error Messages from Default Virtual Function):
  AssertThrows call g:der.SmallVirtual()
  " Not enough arguments...
  AssertThrew 'E119'

  AssertThrows call g:der.SmallVirtual('foo', 'boo')
  " Too many arguments for...
  AssertThrew 'E118'

  AssertThrows call g:der.MediumVirtual('foo', 'boo')
  AssertThrew 'ERROR(NotImplemented)'

  " specify optional
  AssertThrows call g:der.MediumVirtual('foo', 'boo', 'roo')
  AssertThrew 'ERROR(NotImplemented)'

  " specify too many optional
  AssertThrows call g:der.MediumVirtual('foo', 'boo', 'roo', 'aaaaah')
  AssertThrew 'ERROR(InvalidArguments)'

  " specify too many optional
  AssertThrows call g:der.BigVirtual('foo', 'boo', 'roo', 'aaaaah')
  AssertThrew 'ERROR(NotImplemented)'

Execute (typevim#make#Derived: Derived Class, Fail to Clobber Member Variables):
  AssertThrows let g:der = TestDerived#New(1, 1, 0)
  AssertThrew 'ERROR(NotAuthorized)'

Execute (typevim#make#Derived: Derived Class, Clobber Member Variables):
  let g:der = TestDerived#New(1, 1, 1)
  AssertEqual '-1010', g:der['__val']
