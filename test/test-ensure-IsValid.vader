Execute (typevim#ensure#IsValidTypename: Valid):
  AssertEqual 'Foo', typevim#ensure#IsValidTypename('Foo')

Execute (typevim#ensure#IsValidTypename: Valid, With Underscore):
  AssertEqual 'Foo_Bar', typevim#ensure#IsValidTypename('Foo_Bar')

Execute (typevim#ensure#IsValidTypename: Invalid, Non-Lowercase First):
  AssertThrows call typevim#ensure#IsValidTypename('foo')
  AssertEqual 'ERROR(BadValue): typename must start with a capital letter: foo', g:vader_exception

Execute (typevim#ensure#IsValidTypename: Invalid, Underscore First):
  AssertThrows call typevim#ensure#IsValidTypename('_Foo')
  AssertEqual 'ERROR(BadValue): typename must start with a capital letter: _Foo', g:vader_exception

Execute (typevim#ensure#IsValidTypename: Invalid, Number First):
  AssertThrows call typevim#ensure#IsValidTypename('1Foo')
  AssertEqual 'ERROR(BadValue): typename must start with a capital letter: 1Foo', g:vader_exception

Execute (typevim#ensure#IsValidTypename: Invalid, Empty String):
  AssertThrows call typevim#ensure#IsValidTypename('')
  AssertEqual 'ERROR(BadValue): Expected a non-empty string for typename.', g:vader_exception

Execute (typevim#ensure#IsValidTypename: Invalid, Illegal Character):
  AssertThrows call typevim#ensure#IsValidTypename('Foo-Bar')
  AssertEqual 'ERROR(BadValue): Given typename has illegal character ''-'' at index: 3', g:vader_exception

Execute (typevim#ensure#IsValidIdentifier: Valid, Lowercase First):
  AssertEqual 'foo_Bar', typevim#ensure#IsValidIdentifier('foo_Bar')

Execute (typevim#ensure#IsValidIdentifier: Valid, Uppercase First):
  AssertEqual 'Abcdefg', typevim#ensure#IsValidIdentifier('Abcdefg')

Execute (typevim#ensure#IsValidIdentifier: Invalid, Underscore First):
  AssertThrows call typevim#ensure#IsValidIdentifier('_Abcdefg')
  AssertEqual 'ERROR(BadValue): Identifier must start with letter: _Abcdefg', g:vader_exception

Execute (typevim#ensure#IsValidIdentifier: Invalid, Number First):
  AssertThrows call typevim#ensure#IsValidIdentifier('1Abcdefg')
  AssertEqual 'ERROR(BadValue): Identifier must start with letter: 1Abcdefg', g:vader_exception

Execute (typevim#ensure#IsValidIdentifier: Invalid, Illegal Character):
  AssertThrows call typevim#ensure#IsValidIdentifier('Abcdefg-')
  AssertEqual 'ERROR(BadValue): Given identifier has illegal character ''-'' at index: 7', g:vader_exception

Execute (typevim#ensure#IsValidInterfaceProp: Valid, Lowercase First):
  AssertEqual 'foo_Bar', typevim#ensure#IsValidInterfaceProp('foo_Bar')

Execute (typevim#ensure#IsValidInterfaceProp: Valid, Uppercase First):
  AssertEqual 'Abcdefg', typevim#ensure#IsValidInterfaceProp('Abcdefg')

Execute (typevim#ensure#IsValidInterfaceProp: Valid, Ends w/ Question Mark):
  AssertEqual 'Abcdefg?', typevim#ensure#IsValidInterfaceProp('Abcdefg?')

Execute (typevim#ensure#IsValidInterfaceProp: Invalid, Question Mark Partway Through):
  AssertThrows call typevim#ensure#IsValidInterfaceProp('Abcd?efg')
  AssertEqual 'ERROR(BadValue): Given interface property has illegal character ''?'' at index: 4',
      \ g:vader_exception

Execute (typevim#ensure#IsValidInterfaceProp: Invalid, Underscore First):
  AssertThrows call typevim#ensure#IsValidInterfaceProp('_Abcdefg')
  AssertEqual 'ERROR(BadValue): Interface property must start with letter: _Abcdefg', g:vader_exception

Execute (typevim#ensure#IsValidInterfaceProp: Invalid, Number First):
  AssertThrows call typevim#ensure#IsValidInterfaceProp('1Abcdefg')
  AssertEqual 'ERROR(BadValue): Interface property must start with letter: 1Abcdefg', g:vader_exception

Execute (typevim#ensure#IsValidInterfaceProp: Invalid, Illegal Character):
  AssertThrows call typevim#ensure#IsValidInterfaceProp('Abcdefg-')
  AssertEqual 'ERROR(BadValue): Given interface property has illegal character ''-'' at index: 7',
      \ g:vader_exception

Execute (typevim#ensure#IsValidObject: Valid Base Class):
  let g:obj = TestBase#New(3.14)
  AssertEqual g:obj, typevim#ensure#IsValidObject(g:obj)

Execute (typevim#ensure#IsValidObject: Valid Derived Class):
  let g:obj = TestDerived#New(1, 0, 0)
  AssertEqual g:obj, typevim#ensure#IsValidObject(g:obj)

Execute (typevim#ensure#IsValidObject: Misnamed Type List):
  let g:obj = TestBase#New(3.14)
  let g:typelist = g:obj[typevim#attribute#TYPE()]
  unlet g:obj[typevim#attribute#TYPE()]
  let g:obj['FE#SFdfcxcfazsfFEW'] = g:typelist
  AssertThrows call typevim#ensure#IsValidObject(g:obj)
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(WrongType)')

Execute (typevim#ensure#IsValidObject: Type List is Dictionary):
  let g:obj = TestBase#New(3.14)
  let g:typelist = g:obj[typevim#attribute#TYPE()]
  let g:typedict = {}
  for g:type in g:typelist
    let g:typedict[g:type] = 1
  endfor
  let g:obj[typevim#attribute#TYPE()] = g:typedict
  AssertThrows call typevim#ensure#IsValidObject(g:obj)
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(WrongType)')

Execute (typevim#ensure#IsValidObject: Missing Clean Upper):
  let g:obj = TestBase#New(3.14)
  unlet g:obj.CleanUp
  AssertThrows call typevim#ensure#IsValidObject(g:obj)
  AssertNotEqual -1, match(g:vader_exception, 'ERROR(WrongType)')
